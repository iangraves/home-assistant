- alias: SmartIR - Shared HVAC Mode Controller (Hysteresis + Quiet Night)
  mode: queued
  trigger:
    - platform: time_pattern
      minutes: /10
  condition:
    - condition: state
      entity_id: input_boolean.ac_automation_enabled
      state: 'on'
  action:
    - variables:
        now_hour: "{{ now().hour }}"
        nursery_temp: "{{ states('sensor.nursery_rm4_temp') | float }}"
        primary_temp: "{{ states('sensor.primary_rm4_temp') | float }}"
        living_temp: "{{ states('sensor.living_room_rm4_temp') | float }}"
        too_cold: "{{ states('input_number.temperature_too_cold') | float(66) }}"
        too_hot: "{{ states('input_number.temperature_too_hot') | float(71) }}"
        hysteresis: 1

        nursery_night: "{{ now_hour >= 18 or now_hour < 8 }}"
        primary_night: "{{ now_hour >= 21 or now_hour < 8 }}"

        nursery_night_emergency: >
          {{ (nursery_temp > too_hot + 2) or (nursery_temp < too_cold - 2) }}
        primary_night_emergency: >
          {{ (primary_temp > too_hot + 2) or (primary_temp < too_cold - 2) }}

        cool_targets: >-
          {{
            [
              {
                "entity": "climate.nursery_ac",
                "active": (
                  (nursery_night and nursery_night_emergency) or (not nursery_night and nursery_temp > too_hot)
                ),
                "should_off": (
                  (nursery_night and not nursery_night_emergency and nursery_temp < (too_hot - hysteresis))
                  or (not nursery_night and nursery_temp < (too_hot - hysteresis))
                ),
                "temp": nursery_temp
              },
              {
                "entity": "climate.primary_ac",
                "active": (
                  (primary_night and primary_night_emergency) or (not primary_night and primary_temp > too_hot)
                ),
                "should_off": (
                  (primary_night and not primary_night_emergency and primary_temp < (too_hot - hysteresis))
                  or (not primary_night and primary_temp < (too_hot - hysteresis))
                ),
                "temp": primary_temp
              },
              {
                "entity": "climate.living_room_ac",
                "active": (living_temp > too_hot),
                "should_off": (living_temp < (too_hot - hysteresis)),
                "temp": living_temp
              }
            ]
          }}
        heat_targets: >-
          {{
            [
              {
                "entity": "climate.nursery_ac",
                "active": (
                  (nursery_night and nursery_night_emergency) or (not nursery_night and nursery_temp < too_cold)
                ),
                "should_off": (
                  (nursery_night and not nursery_night_emergency and nursery_temp > (too_cold + hysteresis))
                  or (not nursery_night and nursery_temp > (too_cold + hysteresis))
                ),
                "temp": nursery_temp
              },
              {
                "entity": "climate.primary_ac",
                "active": (
                  (primary_night and primary_night_emergency) or (not primary_night and primary_temp < too_cold)
                ),
                "should_off": (
                  (primary_night and not primary_night_emergency and primary_temp > (too_cold + hysteresis))
                  or (not primary_night and primary_temp > (too_cold + hysteresis))
                ),
                "temp": primary_temp
              },
              {
                "entity": "climate.living_room_ac",
                "active": (living_temp < too_cold),
                "should_off": (living_temp > (too_cold + hysteresis)),
                "temp": living_temp
              }
            ]
          }}

        elapsed_seconds: "{{ states('sensor.hvac_mode_elapsed_seconds') | float(9999) }}"
        min_elapsed: 1800
        fan_speed: >-
          {% set max_temp = [
            nursery_temp if cool_targets[0]['active'] else too_cold,
            primary_temp if cool_targets[1]['active'] else too_cold,
            living_temp if cool_targets[2]['active'] else too_cold
          ] | max %}
          {% set min_temp = [
            nursery_temp if heat_targets[0]['active'] else too_hot,
            primary_temp if heat_targets[1]['active'] else too_hot,
            living_temp if heat_targets[2]['active'] else too_hot
          ] | min %}
          {% set delta = (max_temp - 70) if (cool_targets[0]['active'] or cool_targets[1]['active'] or cool_targets[2]['active']) else (70 - min_temp) if (heat_targets[0]['active'] or heat_targets[1]['active'] or heat_targets[2]['active']) else 0 %}
          {% if delta >= 4 %}high
          {% elif delta >= 2 %}medium
          {% elif delta > 0 %}low
          {% else %}low
          {% endif %}

    - choose:
        - conditions: "{{ elapsed_seconds > min_elapsed }}"
          sequence:
            - repeat:
                for_each: "{{ cool_targets }}"
                sequence:
                  - choose:
                      - conditions: "{{ repeat.item.active }}"
                        sequence:
                          - service: script.set_ac_if_needed
                            data:
                              entity: "{{ repeat.item.entity }}"
                              mode: "cool"
                              temperature: "{{ states('input_number.target_temp_cool') | float(70) }}"
                              fan: "{{ fan_speed }}"
                      - conditions: "{{ repeat.item.should_off }}"
                        sequence:
                          - service: script.set_ac_if_needed
                            data:
                              entity: "{{ repeat.item.entity }}"
                              mode: "off"
                              temperature: 70
                              fan: "low"
            - repeat:
                for_each: "{{ heat_targets }}"
                sequence:
                  - choose:
                      - conditions: "{{ repeat.item.active }}"
                        sequence:
                          - service: script.set_ac_if_needed
                            data:
                              entity: "{{ repeat.item.entity }}"
                              mode: "heat"
                              temperature: "{{ states('input_number.target_temp_heat') | float(68) }}"
                              fan: "{{ fan_speed }}"
                      - conditions: "{{ repeat.item.should_off }}"
                        sequence:
                          - service: script.set_ac_if_needed
                            data:
                              entity: "{{ repeat.item.entity }}"
                              mode: "off"
                              temperature: 70
                              fan: "low"

- alias: Notify - Outside Cooler Than Inside
  mode: single
  trigger:
    - platform: time_pattern
      minutes: 0
  condition:
    - condition: template
      value_template: >
        {{ states('sensor.highest_room_temp') | float(0) - states('sensor.outside_next_hour_temp') | float(0) >= 5 }}
  action:
    - service: persistent_notification.create
      data:
        title: "Turn Off AC and Open Windows?"
        message: >-
          The inside is at {{ states('sensor.highest_room_temp') }}°F, but in the next hour the outside is forecast to be {{ states('sensor.outside_next_hour_temp') }}°F.
          Consider opening windows instead of using the AC.

- alias: Update HVAC Last Mode Change
  trigger:
    - platform: state
      entity_id: input_select.hvac_mode_state
  action:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.hvac_last_mode_change
      data:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
  mode: queued